name: rfc-reusable-deploy

on:
  workflow_call:
    inputs:
      connector_version: # fex: 8.5.7 - 8.5 for Camunda release, 7 for connector version
        required: true
        type: string
      cf_api_endpoint:
        required: true
        type: string
      cf_org:
        required: true
        type: string
      cf_space:
        required: true
        type: string
    outputs:
      cluster_uuid:
        description: 'The UUID of the created Camunda Cloud cluster'
        value: ${{ jobs.create-cluster.outputs.cluster-uuid }}

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
        camunda_release: ${{ steps.extract_release.outputs.camunda_release }}
    steps:
      - name: extract release branch # first two digits of connector_version
        run: echo "camunda_release=$(echo ${{ inputs.connector_version }} | cut -d'.' -f1-2)" >> "$GITHUB_OUTPUT"
        id: extract_release

  create-cluster:
    runs-on: ubuntu-latest
    needs: extract-version
    outputs:
        grpc-address: ${{ steps.create_cluster.outputs.grpc-address }}
        rest-address: ${{ steps.create_cluster.outputs.rest-address }}
        client-id: ${{ steps.create_cluster.outputs.client-id }}
        client-secret: ${{ steps.create_cluster.outputs.client-secret }}
        cluster-uuid: ${{ steps.create_cluster.outputs.cluster-uuid }}
    steps:
      - name: Import Secrets
        id: vault-secrets
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID}}
          secrets: |
            secret/data/products/connectors/ci/sap CONSOLE_CLIENT_ID;
            secret/data/products/connectors/ci/sap CONSOLE_CLIENT_SECRET;
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Create cluster
        id: create_cluster
        run: node scripts/manage_cluster.js
        env:
          CONSOLE_CLIENT_ID: ${{ steps.vault-secrets.outputs.CONSOLE_CLIENT_ID }}
          CONSOLE_CLIENT_SECRET: ${{ steps.vault-secrets.outputs.CONSOLE_CLIENT_SECRET }}
          CAMUNDA_DESIRED_GENERATION: ${{ needs.extract-version.outputs.camunda_release }}

  mtad-yaml: # get the mtad.yaml.example from the release branch via sparse checkout
    runs-on: ubuntu-latest
    needs: [create-cluster, extract-version]
    steps:
      - name: checkout mtad.yaml.example
        uses: actions/checkout@v5
        with:
          repository: camunda/sap-rfc-connector
          ref: release/${{ needs.extract-version.outputs.camunda_release }}
          path: yaml
          sparse-checkout: |
            rfc-connector/mtad.yaml.example
          sparse-checkout-cone-mode: false

      - name: check
        run: |
          ls -al .
          ls -al yaml

      - name: fill in target cluster credentials
        run: |
          cd yaml
          ../scripts/replace_mtad_placeholders.js 
          mtad.yaml.example \          
          "${{ inputs.connector_version }}" \
          "${{ needs.create-cluster.outputs.grpc-address }}" \
          "${{ needs.create-cluster.outputs.rest-address }}" \
          "${{ needs.create-cluster.outputs.client-id }}" \
          "${{ needs.create-cluster.outputs.client-secret }}"
          mv mtad.yaml.example mtad.yaml
          cd ..

      # no worries: gh marks secrets with *** also when cat'ing files
      - name: check substitution result
        run: |
          ls -al yaml/mtad.yaml
          cat yaml/mtad.yaml

      - name: Upload mtad.yaml
        uses: actions/upload-artifact@v4
        with:
          name: mtad
          path: yaml/mtad.yaml

  deploy:
    needs: mtad-yaml
    runs-on: ubuntu-latest

    steps:
      - name: install cf cli
        run: |
          # sudo apt-get update
          sudo apt-get install -y wget
          wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
          echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
          # wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo gpg --dearmor -o /usr/share/keyrings/cli.cloudfoundry.org.gpg
          # echo "deb [signed-by=/usr/share/keyrings/cli.cloudfoundry.org.gpg] https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
          sudo apt-get update
          sudo apt-get install -y cf8-cli
          cf install-plugin multiapps -f

      # first, build the connector
      - uses: actions/checkout@v5

      - name: set up jdk 21
        uses: actions/setup-java@v5
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: build
        run: mvn package -DskipTests # as we've run the tests in the previous job

      # second, prep deployment descriptor
      - name: download mtad.yaml
        uses: actions/download-artifact@v5
        with:
          name: mtad
      - name: Import Secrets
        id: vault-secrets
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID}}
          secrets: |
            secret/data/products/connectors/ci/sap SAP_CLOUDFOUNDRY_EMAIL;
            secret/data/products/connectors/ci/sap SAP_CLOUDFOUNDRY_PASSWORD;
      # third, actual deployment
      - name: deploy ${{inputs.connector_version}} to BTP
        # download-artifact puts the file w/o subdir here
        run: |
          ls -al .
          cf login -a ${{ inputs.cf_api_endpoint }} -u ${{ steps.vault-secrets.outputs.SAP_CLOUDFOUNDRY_EMAIL }} \
          -p ${{ steps.vault-secrets.outputs.SAP_CLOUDFOUNDRY_PASSWORD }} -o ${{ inputs.cf_org }} -s ${{ inputs.cf_space }}
          cf deploy ./ -f
